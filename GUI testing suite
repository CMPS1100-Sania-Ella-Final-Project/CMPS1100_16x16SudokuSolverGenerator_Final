import unittest
import subprocess
import sys
import os

class TestGUICode(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        """Set up environment before tests."""
        cls.script_path = 'LOGIC_16SudokuSolver.py'  # Path to your script

    def test_program_runs(self):
        """Test if the program runs without errors."""
        try:
            result = subprocess.run(
                [sys.executable, self.script_path],
                capture_output=True,
                text=True,
                timeout=10
            )
            self.assertEqual(result.returncode, 0, f"Program exited with error: {result.stderr}")
        except Exception as e:
            self.fail(f"Failed to execute the script: {e}")

    def test_gui_components(self):
        """Test if specific GUI components are initialized (example for Tkinter)."""
        try:
            import tkinter as tk
            from LOGIC_16SudokuSolver import main  # Import the main function if modularized
            
            root = tk.Tk()
            main(root)
            self.assertIsInstance(root, tk.Tk, "Root should be a Tk instance.")
            self.assertGreater(len(root.children), 0, "No widgets found in the GUI.")
            root.destroy()
        except Exception as e:
            self.fail(f"GUI test failed: {e}")

    def test_output_correctness(self):
        """Test specific outputs or calculations."""
        try:
            from LOGIC_16SudokuSolver import solve_sudoku  # Example function

            # Replace with an example input and expected output
            test_input = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                          [6, 0, 0, 1, 9, 5, 0, 0, 0],
                          [0, 9, 8, 0, 0, 0, 0, 6, 0],
                          [8, 0, 0, 0, 6, 0, 0, 0, 3],
                          [4, 0, 0, 8, 0, 3, 0, 0, 1],
                          [7, 0, 0, 0, 2, 0, 0, 0, 6],
                          [0, 6, 0, 0, 0, 0, 2, 8, 0],
                          [0, 0, 0, 4, 1, 9, 0, 0, 5],
                          [0, 0, 0, 0, 8, 0, 0, 7, 9]]
            expected_output = [[5, 3, 4, 6, 7, 8, 9, 1, 2],
                               [6, 7, 2, 1, 9, 5, 3, 4, 8],
                               [1, 9, 8, 3, 4, 2, 5, 6, 7],
                               [8, 5, 9, 7, 6, 1, 4, 2, 3],
                               [4, 2, 6, 8, 5, 3, 7, 9, 1],
                               [7, 1, 3, 9, 2, 4, 8, 5, 6],
                               [9, 6, 1, 5, 3, 7, 2, 8, 4],
                               [2, 8, 7, 4, 1, 9, 6, 3, 5],
                               [3, 4, 5, 2, 8, 6, 1, 7, 9]]
            output = solve_sudoku(test_input)
            self.assertEqual(output, expected_output, "The solver did not return the expected result.")
        except Exception as e:
            self.fail(f"Output correctness test failed: {e}")

if __name__ == "__main__":
    unittest.main()
